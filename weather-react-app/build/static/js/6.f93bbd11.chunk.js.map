{"version":3,"sources":["components/error/ErrorComponent.js","context/WeatherUnitContext.js","utils/FetchIPAddress.js","context/AddressContext.js","utils/API.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/ValidCityName.js","components/address/AddressComponent.js","components/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js","utils/ValidityChecker.js"],"names":["ErrorComponent","props","theme","useContext","ThemeContext","className","role","errorMessage","showCloseBtn","onClick","closeError","xmlns","viewBox","d","WeatherUnitContext","React","createContext","weatherUnit","WeatherUnitContextProvider","children","useState","setWeatherUnit","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","Provider","value","updateWeatherUnit","unit","fetchIPAddress","a","axios","get","data","Sentry","AddressContext","SPECIAL_COUNTRY_CODES","AddressContextProvider","updateState","state","setState","updateFavorites","showLoader","address","cityName","cityId","latlong","favorites","formatCoords","latitude","longitude","countryCode","includes","context","updateAddress","hit","API_URL","hits","isValid","city","administrative","country","validName","objectID","country_code","toUpperCase","getIPAddress","region","country_name","Latitude","isNil","isNaN","Number","Longitude","getAddress","navigator","geolocation","getCurrentPosition","position","coords","error","console","getFavorites","this","Component","contextType","propTypes","PropTypes","objectOf","string","array","func","isProduction","ErrorBoundaryContainer","hasError","eventId","errorInfo","scope","setExtras","name","showDelimeter","AddressComponent","selectedAddressIndex","index","addressSelected","colorTheme","IconComponent","type","color","TYPES","search","up","down","SearchComponent","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","onKeyDown","keyPressed","tabIndex","showCaret","caretClicked","showAddresses","axiosRetry","retryDelay","exponentialDelay","AutoCompleteContainer","listRef","createRef","undefined","addresses","scrollOffset","debounceAddress","debounce","getAddresses","searchCity","event","target","toggleAddresses","prevState","setCity","split","Event","category","action","label","keyCodeHandler","e","keyCode","Math","max","current","scrollTo","left","top","behavior","min","length","message","trim","results","map","en","default","lat","lng","handleError","clearState","LoaderComponent","ref","key","WeatherContainer","lazy","FavoritesContainer","HomeContainer","fallback","loaderText","isEmpty"],"mappings":"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","file":"static/js/6.f93bbd11.chunk.js","sourcesContent":["import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport './ErrorStyle.scss'\n\nconst ErrorComponent = (props) => {\n  const {theme} = useContext(ThemeContext)\n  return (\n    <div\n      className={`w-11/12 sm:w-3/4 md:w-5/6 ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\n      role='alert'>\n      <span className='w-5/6 block break-words text-sm'>\n        {props.errorMessage}\n      </span>\n      {props.showCloseBtn && (\n        <span\n          className='absolute top-0 bottom-0 right-0 ml-3 mr-1'\n          onClick={props.closeError}>\n          <svg\n            className='fill-current h-6 w-6 text-red-500 close-icon'\n            role='button'\n            xmlns='http://www.w3.org/2000/svg'\n            viewBox='0 0 20 20'>\n            <title>Close</title>\n            <path d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z' />\n          </svg>\n        </span>\n      )}\n    </div>\n  )\n}\n\nexport default ErrorComponent\n","import React, {useState, useEffect} from 'react'\nconst WeatherUnitContext = React.createContext({\n  weatherUnit: 'C'\n})\n\nconst WeatherUnitContextProvider = ({children}) => {\n  const [weatherUnit, setWeatherUnit] = useState('C')\n\n  /**\n   * @param {String} unit (F | C)\n   * @param {String} type (selectUnit | toggle)\n   */\n  const updateWeatherUnit = unit => {\n    setWeatherUnit(unit)\n    localStorage.setItem('unit', JSON.stringify(unit))\n  }\n\n  useEffect(() => {\n    // store preferred temperature unit in localStorage\n    if (!localStorage.getItem('unit')) {\n      localStorage.setItem('unit', JSON.stringify('C'))\n    } else {\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\n      {children}\n    </WeatherUnitContext.Provider>\n  )\n}\n\nexport {WeatherUnitContext, WeatherUnitContextProvider}\n","import axios from 'axios'\nimport * as Sentry from '@sentry/browser'\n\nconst fetchIPAddress = async () => {\n  try {\n    const {data} = await axios.get('https://ipapi.co/json')\n    return data\n  } catch (err) {\n    Sentry.captureException(err)\n  }\n}\n\nexport default fetchIPAddress\n","import React, {Component} from 'react'\nimport {WeatherUnitContext} from './WeatherUnitContext'\nimport {PropTypes} from 'prop-types'\nimport axios from 'axios'\nimport * as Sentry from '@sentry/browser'\nimport validName from './../utils/ValidCityName'\nimport fetchIPAddress from './../utils/FetchIPAddress'\nimport API_URL from '../utils/API'\nimport isValid from '../utils/ValidityChecker'\nimport {isNil} from 'lodash-es'\n\n// const token = process.env.REACT_APP_IPINFO_TOKEN\nconst AddressContext = React.createContext(null)\n\n/**\n * Today, countries that use the Fahrenheit include the United States, Bahamas, Palau,\n * Belize, the Cayman Islands, the Federated States of Micronesia,\n * the Marshall Islands, and the territories such as Puerto Rico,\n * the U.S. Virgin Islands, and Guam.\n */\nconst SPECIAL_COUNTRY_CODES = [\n  'US',\n  'BS',\n  'PW',\n  'BZ',\n  'KY',\n  'FM',\n  'PR',\n  'VI',\n  'GU',\n]\n\nclass AddressContextProvider extends Component {\n  // get weather unit\n  static contextType = WeatherUnitContext\n\n  updateState = (state) => {\n    this.setState({...state})\n  }\n\n  updateFavorites = (state) => {\n    this.setState({...state})\n  }\n  state = {\n    showLoader: true,\n    address: {\n      cityName: '',\n      cityId: '',\n    },\n    latlong: null,\n    favorites: [],\n    updateState: this.updateState,\n    updateFavorites: this.updateFavorites,\n  }\n\n  formatCoords = (latitude, longitude) => {\n    return `${latitude},${longitude}`\n  }\n\n  updateWeatherUnit = (countryCode) => {\n    // update the weatherUnit to 'F' if the countryCode is a special country code\n    if (SPECIAL_COUNTRY_CODES.includes(countryCode)) {\n      this.context.updateWeatherUnit('F')\n    }\n  }\n\n  /**\n   * update address using reverse geocoding of Algolia PLaces to obtain city, state, country, cityID\n   */\n  updateAddress = async (latlong) => {\n    let hit = {}\n    try {\n      const {hits} = (\n        await axios.get(`${API_URL}/address/coords/${latlong}`)\n      ).data\n      hit = hits[0]\n\n      if (isValid(hit)) {\n        const city = hit.city ? hit.city[0] : ''\n        const state = hit.administrative ? hit.administrative[0] : ''\n        const country = hit.country ? hit.country : ''\n        const cityName = `${validName(city)}${validName(state)}${validName(\n          country,\n          false\n        )}`\n        const cityId = hit.objectID ? hit.objectID : ''\n        // country_code in hit will be in lowercase\n        const countryCode = hit.country_code\n          ? hit.country_code.toUpperCase()\n          : ''\n        this.updateWeatherUnit(countryCode)\n        this.updateState({\n          showLoader: false,\n          address: {\n            cityName,\n            cityId,\n          },\n          latlong,\n        })\n      }\n    } catch (error) {\n      Sentry.captureException(error)\n    }\n  }\n\n  /**\n   * get ip and city info using ip-api\n   * update the address\n   */\n  getIPAddress = async () => {\n    try {\n      const data = await fetchIPAddress()\n      if (isValid(data)) {\n        const {\n          latitude,\n          longitude,\n          city,\n          region,\n          country_name,\n          country_code,\n        } = data\n        const cityName = `${city}, ${region}, ${country_name}`\n        this.updateWeatherUnit(country_code)\n\n        // check whether latitude and longitude are strings which are NaN as well as if value is null or undefined\n        const Latitude =\n          isNil(latitude) || isNaN(Number(latitude)) ? '00' : latitude\n        const Longitude =\n          isNil(longitude) || isNaN(Number(longitude)) ? '00' : longitude\n        this.updateState({\n          showLoader: false,\n          address: {\n            cityName,\n          },\n          latlong: this.formatCoords(Latitude, Longitude),\n        })\n      } else {\n        this.updateState({showLoader: false})\n      }\n    } catch (error) {\n      Sentry.captureException(error)\n    }\n  }\n\n  getAddress = async () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const latlong = this.formatCoords(\n            position.coords.latitude,\n            position.coords.longitude\n          )\n          this.updateAddress(latlong)\n        },\n        (error) => {\n          console.error(error)\n          this.getIPAddress()\n        }\n      )\n    } else {\n      this.getIPAddress()\n    }\n  }\n\n  getFavorites = () => {\n    if (localStorage.getItem('favorites')) {\n      this.setState({\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.getAddress()\n    // update favorites for the initial application load\n    this.getFavorites()\n  }\n\n  render() {\n    return (\n      <AddressContext.Provider value={this.state}>\n        {this.props.children}\n      </AddressContext.Provider>\n    )\n  }\n}\n\nexport {AddressContext, AddressContextProvider}\n\nAddressContext.propTypes = {\n  address: PropTypes.objectOf(PropTypes.string),\n  favorites: PropTypes.array,\n  updateState: PropTypes.func,\n  updateFavorites: PropTypes.func,\n}\n","/**\n * weather react serverless API functions URL\n */\nconst isProduction = process.env.NODE_ENV === 'production'\n/**\n * update the URLs to point to your Back-end project deployed URL\n * weather-react-api has access-control-origin restricted to iamsainikhil.com\n * all the requests initiated from any other domain (including localhost) will be rejected!\n */\n\nexport default isProduction\n  ? 'https://weather-react-api.now.sh'\n  : 'https://weather-react-api-dev.now.sh'\n","import React, {Component} from 'react'\nimport ErrorComponent from '../../components/error/ErrorComponent'\nimport * as Sentry from '@sentry/browser'\n\nexport class ErrorBoundaryContainer extends Component {\n  state = {\n    hasError: false,\n    eventId: null,\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {hasError: true}\n  }\n\n  componentDidCatch(error, errorInfo) {\n    Sentry.withScope((scope) => {\n      scope.setExtras(errorInfo)\n      const eventId = Sentry.captureException(error)\n      this.setState({eventId})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.hasError ? (\n          <div className='flex'>\n            <div className='w-1/6'></div>\n            <div className='flex-col w-2/3 justify-center text-center'>\n              <ErrorComponent\n                errorMessage={'Something went wrong. Reload the page!'}\n              />\n              <button\n                className='font-semibold py-3 px-6 rounded-full capitalize text-sun'\n                onClick={() =>\n                  Sentry.showReportDialog({eventId: this.state.eventId})\n                }>\n                Report feedback\n              </button>\n            </div>\n          </div>\n        ) : (\n          this.props.children\n        )}\n      </div>\n    )\n  }\n}\n\nexport default ErrorBoundaryContainer\n","import isValid from './ValidityChecker'\n\n/**\n * util func to check and return the valid name\n * @param {*} name (city or state or country)\n * @param {*} showDelimeter (false for country)\n */\nconst validName = (name, showDelimeter = true) => {\n  return isValid(name) ? `${name}${showDelimeter ? ', ' : ''}` : ''\n}\n\nexport default validName\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport {PropTypes} from 'prop-types'\n\nconst AddressComponent = ({\n  address,\n  selectedAddressIndex,\n  index,\n  addressSelected,\n}) => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  return (\n    <p\n      className={`px-5 py-1 cursor-pointer item hover:text-${theme} hover:bg-${colorTheme} ${\n        index === selectedAddressIndex\n          ? `text-${theme} bg-${colorTheme}`\n          : `text-${colorTheme}`\n      }`}\n      onClick={addressSelected}>\n      {address.cityName}\n    </p>\n  )\n}\n\nexport default AddressComponent\n\nAddressComponent.propTypes = {\n  addressSelected: PropTypes.func,\n  address: PropTypes.objectOf(PropTypes.string),\n  selectedAddressIndex: PropTypes.number,\n  index: PropTypes.number,\n}\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport {PropTypes} from 'prop-types'\nimport {FiSearch} from 'react-icons/fi'\nimport {IoIosArrowUp, IoIosArrowDown} from 'react-icons/io'\n\nconst IconComponent = ({type, color}) => {\n  const TYPES = {\n    search: <FiSearch />,\n    up: <IoIosArrowUp />,\n    down: <IoIosArrowDown />,\n  }\n  return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\n}\n\nconst SearchComponent = (props) => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  return (\n    <div className='h-12 mx-5 mt-5'>\n      <div className='relative'>\n        <div className='absolute top-0 left-0 ml-5 mt-3'>\n          <IconComponent type='search' color={colorTheme} />\n        </div>\n        <input\n          style={{\n            backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\n            letterSpacing: '0.05em',\n          }}\n          className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\n          id='grid-first-name'\n          type='text'\n          placeholder='Type city name to find weather forecast'\n          onChange={props.citySearch}\n          onKeyDown={props.keyPressed}\n          tabIndex='0'\n          value={props.city}\n        />\n        {props.showCaret ? (\n          <div\n            className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\n            onClick={props.caretClicked}>\n            {props.showAddresses ? (\n              <IconComponent type='up' color={colorTheme} />\n            ) : (\n              <IconComponent type='down' color={colorTheme} />\n            )}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default SearchComponent\n\nSearchComponent.propTypes = {\n  city: PropTypes.string,\n  cityName: PropTypes.string,\n  showCaret: PropTypes.bool,\n  showAddresses: PropTypes.bool,\n  caretClicked: PropTypes.func,\n}\n","import React, {Component, Fragment} from 'react'\nimport axios from 'axios'\nimport axiosRetry from 'axios-retry'\nimport './AutoCompleteStyle.scss'\nimport AddressComponent from '../../components/address/AddressComponent'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport ErrorComponent from '../../components/error/ErrorComponent'\nimport {AddressContext} from '../../context/AddressContext'\nimport SearchComponent from '../../components/search/SearchComponent'\nimport * as Sentry from '@sentry/browser'\nimport {Event} from '../../utils/ReactAnalytics'\nimport validName from '../../utils/ValidCityName'\nimport API_URL from './../../utils/API'\nimport isValid from '../../utils/ValidityChecker'\nimport {debounce, isNil} from 'lodash-es'\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\n\nclass AutoCompleteContainer extends Component {\n  static contextType = AddressContext\n  listRef = React.createRef(undefined)\n  state = {\n    showCaret: false,\n    showAddresses: false,\n    showLoader: false,\n    city: '',\n    addresses: [],\n    selectedAddressIndex: 0,\n    scrollOffset: 0,\n    errorMessage: '',\n  }\n\n  handleError(message) {\n    this.setState({errorMessage: message})\n  }\n\n  // debounced function\n  debounceAddress = debounce(this.getAddresses, 1000)\n\n  searchCity = (event) => {\n    this.setState({city: event.target.value, errorMessage: ''})\n    this.debounceAddress()\n  }\n\n  // fetch valid matched addresses for searched city\n  async getAddresses() {\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\n    // city value could be empty when this function run\n    // so this extra check will fix the bug of showing addresses list when there is no city name\n    if (this.state.city.trim()) {\n      try {\n        this.setState({showLoader: true})\n        // the below latlong check is just a workaround for accessing correct api route\n        // otherwise, no matter how good the city name is, when latlong is empty user will get 404 since there is no route without latlong on the api server\n        const latlong =\n          !isNil(this.context.latlong) && !isNaN(Number(this.context.latlong))\n            ? this.context.latlong\n            : '00,00'\n\n        const {hits} = (\n          await axios.get(\n            `${API_URL}/places/query/${this.state.city}/${latlong}`\n          )\n        ).data\n\n        // populate addresses and show them if matching cities exist\n        if (isValid(hits)) {\n          const results = hits.map((hit) => {\n            // city value lives in default array of locale_names\n            const city = `${\n              hit['locale_names'].en\n                ? hit['locale_names'].en[0]\n                : hit['locale_names'].default[0]\n            }`\n            // state value lives in administrative array\n            const state = `${hit.administrative ? hit.administrative[0] : ''}`\n            // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\n            const country = `${\n              hit.country.en ? hit.country.en : hit.country.default\n            }`\n\n            // prettier-ignore\n            const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\n            const {lat, lng} = hit['_geoloc']\n            return {\n              cityName: cityName,\n              cityId: hit.objectID,\n              latlong: `${lat},${lng}`,\n            }\n          })\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\n          this.setState({\n            addresses: results,\n            showCaret: true,\n            showAddresses: true,\n            errorMessage: '',\n          })\n        } else {\n          this.setState({showAddresses: false})\n          this.handleError(\n            'No matching cities found. Try searching with a valid city name!'\n          )\n        }\n      } catch (error) {\n        Sentry.captureException(error)\n        this.handleError(\n          'Something went wrong. Please try again or search with a different city name!'\n        )\n      } finally {\n        this.setState({showLoader: false, selectedAddressIndex: 0})\n      }\n    } else {\n      this.clearState()\n    }\n  }\n\n  toggleAddresses = () => {\n    this.setState((prevState) => {\n      return {\n        showAddresses: !prevState.showAddresses,\n      }\n    })\n  }\n\n  setCity = async (address) => {\n    if (address) {\n      // set city to just have cityName excluding state and country in the search input\n      // 'Herndon, Virginia, United States' -> 'Herndon'\n      this.setState({\n        city: address.cityName.split(',')[0],\n        showAddresses: false,\n      })\n      // // track this cityName to GA\n      Event({\n        category: 'Address',\n        action: 'City Search',\n        label: address.cityName,\n      })\n\n      this.context.updateState({\n        address: address,\n        latlong: address.latlong,\n      })\n    }\n  }\n\n  keyCodeHandler = (e) => {\n    if (e.keyCode) {\n      if (e.keyCode === 38) {\n        // up arrow\n        this.setState((prevState) => {\n          return {\n            selectedAddressIndex: Math.max(\n              0,\n              prevState.selectedAddressIndex - 1\n            ),\n          }\n        })\n        // scroll up inside the address list corresponding to up/down arrow key\n        this.listRef.current.scrollTo({\n          left: 0,\n          top:\n            this.state.selectedAddressIndex < 6\n              ? 0\n              : this.state.selectedAddressIndex * 30,\n          behavior: 'auto',\n        })\n      } else if (e.keyCode === 40) {\n        // down arrow\n        this.setState((prevState) => {\n          return {\n            selectedAddressIndex: Math.min(\n              prevState.selectedAddressIndex + 1,\n              this.state.addresses.length - 1\n            ),\n          }\n        })\n        // scroll down inside the address list corresponding to up/down arrow key\n        this.listRef.current.scrollTo({\n          left: 0,\n          top: this.state.selectedAddressIndex * 30,\n          behavior: 'auto',\n        })\n      }\n    }\n  }\n\n  clearState() {\n    this.setState({\n      showCaret: false,\n      showAddresses: false,\n      showLoader: false,\n      addresses: [],\n      selectedAddressIndex: 0,\n      errorMessage: '',\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className='flex justify-center mt-5'>\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\n            <SearchComponent\n              city={this.state.city}\n              showCaret={this.state.showCaret}\n              showAddresses={this.state.showAddresses}\n              citySearch={this.searchCity}\n              keyPressed={this.keyCodeHandler}\n              caretClicked={this.toggleAddresses}\n            />\n          </div>\n        </div>\n        <div className='flex justify-center'>\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\n            {this.state.showLoader ? (\n              <LoaderComponent />\n            ) : (\n              this.state.showAddresses && (\n                <div\n                  className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'\n                  ref={this.listRef}>\n                  {this.state.addresses.map((address, index) => {\n                    return (\n                      <AddressComponent\n                        address={address}\n                        selectedAddressIndex={this.state.selectedAddressIndex}\n                        index={index}\n                        key={index}\n                        addressSelected={() => this.setCity(address)}\n                      />\n                    )\n                  })}\n                </div>\n              )\n            )}\n            {this.state.errorMessage.length > 0 && (\n              <div className='flex justify-center'>\n                <div className='w-5/6'>\n                  <ErrorComponent\n                    errorMessage={this.state.errorMessage}\n                    showCloseBtn={true}\n                    closeError={() => {\n                      this.setState({errorMessage: ''})\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n\nexport default AutoCompleteContainer\n","import React, {Component, Suspense, lazy, Fragment} from 'react'\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport {AddressContextProvider} from '../../context/AddressContext'\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\n\nexport class HomeContainer extends Component {\n  static contextType = ThemeContext\n\n  render() {\n    return (\n      <Fragment>\n        <WeatherUnitContextProvider>\n          <AddressContextProvider>\n            <AutoCompleteContainer />\n            <ErrorBoundaryContainer>\n              <Suspense\n                fallback={\n                  <LoaderComponent loaderText={'Loading weather forecast UI'} />\n                }>\n                <WeatherContainer />\n                <FavoritesContainer />\n              </Suspense>\n            </ErrorBoundaryContainer>\n          </AddressContextProvider>\n        </WeatherUnitContextProvider>\n      </Fragment>\n    )\n  }\n}\n\nexport default HomeContainer\n","import {isEmpty, isNil} from 'lodash-es'\n\n/**\n * Check if the given value is valid or not\n * @param {*} value\n * @returns {Boolean}\n */\nconst isValid = (value) => {\n  return !isEmpty(value) && !isNil(value)\n}\n\nexport default isValid\n"],"sourceRoot":""}