{"version":3,"sources":["utils/FormatTime.js","utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/MiscTrackEvents.js","utils/WeatherBackground.js","components/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/TemperatureConvert.js","components/weather/WeatherIconComponent.js","components/weather/InfoDetailComponent.js","utils/AssetsSrcURL.js","utils/SpeedConvert.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/DayComponent.js","components/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","components/weather/AlertComponent.js","containers/weather-forecast/WeatherForecastContainer.js"],"names":["FormatTime","timestamp","timezone","formatType","moment","tz","format","axiosRetry","axios","retryDelay","exponentialDelay","getURL","latlong","API_URL","FetchWeatherData","a","weatherCurrent","weatherForecast","alerts","error","isValid","get","weatherData","data","currently","sunrise","daily","sunriseTime","sunset","sunsetTime","timeFrames","hourly","forEach","hour","date","time","Object","keys","includes","push","days","day","alert","Sentry","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","emitGA","value","Event","category","action","label","formatTime","isDawnDusk","currentTime","currentHour","split","timeHour","Number","getWeatherBackground","icon","currentMinutes","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","getType","dawn","dusk","InfoComponent","address","updateFavorites","useContext","AddressContext","useState","setDate","setTime","emitFavoriteCityGA","favoriteCity","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","length","datetimeSetter","dateObj","isUndefined","current","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","isEmpty","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","getWindDirection","deg","getWeatherIcon","fToC","temp","Math","round","WeatherIconComponent","up","right","down","left","InfoDetailComponent","WeatherUnitContext","weatherUnit","updateWeatherUnit","unitClick","unit","computedTempValue","startsWith","summary","src","alt","humidity","windSpeed","computedSpeedValue","windBearing","CurrentWeatherContainer","ErrorBoundaryContainer","LoaderComponent","DayComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","selectedDay","TimeframeComponent","Timeframe","ForecastContainer","setSelectedDay","selectedDayIndex","setSelectedDayIndex","updateSelectedDay","today","selectedDayIndexHandler","indexOf","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","key","daySelectHandler","AlertComponent","expires","uri","startTime","endTime","severity","regions","severityColor","role","region","href","target","rel","WeatherForecastContainer","imageBorder","borderTopLeftRadius","borderTopRightRadius","showAlerts","setShowAlerts","style","background"],"mappings":"sHAAA,qBAWeA,IAJI,SAACC,EAAWC,EAAUC,GACvC,OAAOC,IAAOC,GAAe,IAAZJ,EAAkBC,GAAUI,OAAOH,K,4ICAtDI,IAAWC,IAAO,CAACC,WAAYF,IAAWG,mBAE1C,IAAMC,EAAS,SAACC,GACd,MAAM,GAAN,OAAUC,IAAV,4BAAqCD,EAArC,0CAMIE,EAAgB,uCAAG,6CAAAC,EAAA,yDAAQH,EAAR,EAAQA,QAC3BI,EAAiB,GACjBC,EAAkB,GAClBC,EAAS,GACTC,EAAQ,MAGRC,YAAQR,GAPW,0CASQJ,IAAMa,IAAIV,EAAOC,IATzB,OASbU,EATa,OASoCC,KACnDH,YAAQE,KAIJpB,EAAWoB,EAAYpB,SAE7Bc,EAAc,yBACZd,YACGoB,EAAYE,WAFH,IAGZC,QAASH,EAAYI,MAAMH,KAAK,GAAGI,YACnCC,OAAQN,EAAYI,MAAMH,KAAK,GAAGM,aAK9BC,EAAa,GAGnBR,EAAYS,OAAOR,KAAKS,SAAQ,SAACC,GAC/B,IAAMC,EAAOlC,YAAWiC,EAAKE,KAAMjC,EAAU,cACzCkC,OAAOC,KAAKP,GAAYQ,SAASJ,GACnCJ,EAAWI,GAAMK,KAAjB,aAAuBrC,YAAa+B,IAEpCH,EAAWI,GAAQ,CAAC,aAAChC,YAAa+B,OAGhCO,EAAO,GAGblB,EAAYI,MAAMH,KAAKS,SAAQ,SAACS,GAC9B,IAAMP,EAAOlC,YAAWyC,EAAIN,KAAMjC,EAAU,cAG5CsC,EAAKN,GAAL,aAAchC,YAAauC,MAG7BxB,EAAkB,CAACa,aAAYU,QAE3BpB,YAAQE,EAAYJ,SACtBI,EAAYJ,OAAOc,SAAQ,SAACU,GAC1BxB,EAAOqB,KAAP,aACErC,YACGwC,QApDQ,kDA0DnBvB,EAAK,KACLwB,IAAA,MA3DmB,iCA+DhB,CACL3B,iBACAC,kBACAC,SACAC,UAnEqB,0DAAH,sDAuEPL,O,iCCxDA8B,IAzBU,SAACC,GAAD,IAAOC,EAAP,uDAAoB,SAApB,MAAkC,CACzDC,MAAO,OACPC,aAAuB,SAATH,EAAkC,WAAfC,EAA0B,EAAI,EAAK,EACpEG,eAAyB,SAATJ,EAAkC,WAAfC,EAA0B,EAAI,EAAK,EACtEI,mBAA6B,SAATL,EAAkB,IAAM,IAC5CM,WAAqB,SAATN,EAAkC,WAAfC,EAA0B,EAAM,IAAQ,EACvEM,MAAO,IACPC,OAAQ,eACRC,sBAAuB,CACrBC,gBAAiB,CACfC,QAAS,QAEXC,gBAAiB,CACfD,QAAS,QAEXE,gBAAiB,CACfC,KAAM,UACNH,QAAS,OACTI,SAAU,WACVC,IAAc,QAAThB,EAAiB,OAAS,OAC/BiB,OAAQ,gB,iCC3Bd,YAqCeC,IA/BA,SAAClB,EAAMmB,GACpB,OAAQnB,GACN,IAAK,YAEHoB,YAAM,CACJC,SAAU,YACVC,OAAQ,kBACRC,MAAOJ,IAET,MACF,IAAK,eAEHC,YAAM,CACJC,SAAU,eACVC,OAAQ,wBACRC,MAAOJ,IAET,MACF,IAAK,aAEHC,YAAM,CACJC,SAAU,aACVC,OAAQ,sBACRC,MAAOJ,O,+FCrBTK,EAAa,SAACxB,EAAMV,EAAMjC,GAC9B,MAAa,YAAT2C,GAA+B,WAATA,EACjBzC,IAAc,IAAP+B,GACX9B,GAAGH,GACHI,OAAO,QAELF,MAASC,GAAGH,GAAUI,OAAO,SA+BhCgE,EAAa,SAACC,EAAapC,GAC/B,IAAMqC,EAAcD,EAAYE,MAAM,KAAK,GACrCC,EAAWvC,EAAKsC,MAAM,KAAK,GACjC,OACEE,OAAOH,KAAiBG,OAAOD,GAAY,GAC3CC,OAAOH,KAAiBG,OAAOD,IAyDpBE,EAhDc,SAACrD,GAC5B,IAAOsD,EAAmCtD,EAAnCsD,KAAM3E,EAA6BqB,EAA7BrB,SAAUuB,EAAmBF,EAAnBE,QAASG,EAAUL,EAAVK,OAE1BD,EAAc0C,EAAW,UAAW5C,EAASvB,GAC7C2B,EAAawC,EAAW,SAAUzC,EAAQ1B,GAC1CqE,EAAcF,EAAW,OAAQ,EAAGnE,GAEpC2C,EA3CQ,SAAC0B,EAAa5C,EAAaE,GACzC,MAAsC0C,EAAYE,MAAM,KAAxD,mBAAOD,EAAP,KAAoBM,EAApB,KACA,EAAsCnD,EAAY8C,MAAM,KAAxD,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAAoCnD,EAAW4C,MAAM,KAArD,mBAAOQ,EAAP,KAAmBC,EAAnB,KACA,OAAIV,IAAgBO,GAAeP,IAAgBS,EAC1CN,OAAOG,IAAmBH,OAAOK,IACtCL,OAAOG,GAAkBH,OAAOO,GAC9B,MACA,QAEGP,OAAOH,GAAeG,OAAOI,IAClCJ,OAAOH,GAAeG,OAAOM,GAC3B,MACA,QA8BOE,CAAQZ,EAAa5C,EAAaE,GAEzCuD,EAAOd,EAAWC,EAAa5C,GAE/B0D,EAAOf,EAAWC,EAAa1C,GAErC,GAAIgD,EACF,OAAQA,GACN,IAAK,YACH,OAAOQ,EAAO,OAASD,EAAO,OAAS,YACzC,IAAK,cACH,OAAOC,EAAO,OAASD,EAAO,OAAS,cACzC,IAAK,OAEL,IAAK,OAEL,IAAK,QACH,MAAM,YAAN,OAAmBvC,GACrB,IAAK,OACH,MAAM,UAAN,OAAiBA,GACnB,IAAK,MACH,MAAM,YAAN,OAAmBA,GACrB,IAAK,SAEL,IAAK,oBAEL,IAAK,sBACH,MAAM,UAAN,OAAiBA,GACnB,IAAK,OACH,MAAM,YAAN,OAAmBA,GACrB,IAAK,eACH,MAAO,eACT,IAAK,UACH,MAAO,UACT,QACE,MAAO,YAGb,MAAO,a,mDCoCMyC,EApIO,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,QAAS3E,EAA6B,EAA7BA,QAASI,EAAoB,EAApBA,eACjCwE,EAAmBC,qBAAWC,KAA9BF,gBACP,EAAwBG,mBAAS,IAAjC,mBAAOzD,EAAP,KAAa0D,EAAb,KACA,EAAwBD,mBAAS,IAAjC,mBAAOxD,EAAP,KAAa0D,EAAb,KAOMC,EAAqB,SAACjD,EAAMkD,GAChC9B,YAAM,CACJC,SAAU,gBACVC,OAAO,GAAD,OAAKtB,EAAL,SACNuB,MAAO2B,KAMLC,EAAuBC,mBAEvBC,EAAe,WACnB,QAAIC,aAAaC,QAAQ,cACLC,KAAKC,MAAMH,aAAaC,QAAQ,cACxBG,QACxB,SAACC,GAAD,OAAcA,EAASjB,QAAQkB,WAAalB,EAAQkB,YAEvCC,OAAS,GA+CtBC,EAAiB,SAACC,GACtBhB,EAASiB,YAAYD,GAAmD,GAAxCA,EAAQtG,OAAO,wBAC/CuF,EAASgB,YAAYD,GAAsC,GAA3BA,EAAQtG,OAAO,WAC/C0F,EAAqBc,QAAUF,GAAoB,MAwBrD,OArBAG,qBAAU,WAERJ,EACEvG,IAA6B,IAAtBY,EAAemB,MAAa9B,GAAGW,EAAed,WAGvD,IAAM8G,EAAYC,aAAY,WAC5B,GAAIjG,EAAemB,KAAM,CAEvB,IAAM+E,EAAuB9G,IAC1BC,GAAG2F,EAAqBc,QAAS9F,EAAed,UAChDiH,IAAI,EAAG,KACVR,EAAeO,MAEhB,KACH,OAAO,WACLE,cAAcJ,MAGf,CAAChG,IAGF,yBAAKqG,UAAU,oCACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,aAAa9B,EAAQkB,UAClC,yBAAKY,UAAU,8CACXC,YAAQpF,IAAUoF,YAAQnF,GAQxB,KAPF,kBAAC,WAAD,KACE,2BACGD,EACD,0BAAMmF,UAAU,wBAAhB,cAEF,2BAAIlF,MAKZ,yBACEkF,UAAU,oCACVE,MACErB,IACI,kCACA,qBAENsB,QA5FmB,WAEvB,GAAKrB,aAAaC,QAAQ,aAMnB,CACL,IAAMqB,EAAYpB,KAAKC,MAAMH,aAAaC,QAAQ,cAC5CsB,EAAaD,EAAUlB,QAC3B,SAACC,GAAD,OAAcA,EAASjB,QAAQkB,WAAalB,EAAQkB,YAEtD,GAAKiB,EAAWhB,OAQT,CAGL,IAAMiB,EAAcF,EAAUG,WAC5B,SAACpB,GAAD,OACEA,EAASjB,QAAQkB,WAAaiB,EAAW,GAAGnC,QAAQkB,YAExD,IAAqB,IAAjBkB,EAAoB,CACtB,IAAME,EAAY,YAAOJ,GACzBI,EAAaC,OAAOH,EAAa,GACjCxB,aAAa4B,QAAQ,YAAa1B,KAAK2B,UAAUH,IACjD/B,EAAmB,SAAUP,EAAQkB,UACrCjB,EAAgB,CACdiC,UAAWI,SArBO,CAEtB,IAAMI,EAAgB,sBAAOR,GAAP,CAAkB,CAAClC,UAAS3E,aAClDuF,aAAa4B,QAAQ,YAAa1B,KAAK2B,UAAUC,IACjDnC,EAAmB,MAAOP,EAAQkB,UAClCjB,EAAgB,CACdiC,UAAWQ,UAhBf9B,aAAa4B,QAAQ,YAAa1B,KAAK2B,UAAU,CAAC,CAACzC,UAAS3E,cAC5DkF,EAAmB,MAAOP,EAAQkB,UAClCjB,EAAgB,CACdiC,UAAW,CAAC,CAAClC,UAAS3E,gBAuFrBsF,IAAiB,kBAAC,IAAD,MAAc,kBAAC,IAAD,S,SC/GzBgC,EApBU,SAAAC,GACvB,OAAIA,GAAO,GAAKA,GAAO,GACd,KACEA,GAAO,IAAMA,GAAO,GACtB,WACEA,GAAO,IAAMA,GAAO,IACtB,QACEA,GAAO,KAAOA,GAAO,IACvB,aACEA,GAAO,KAAOA,GAAO,IACvB,OACEA,GAAO,KAAOA,GAAO,IACvB,YACEA,GAAO,KAAOA,GAAO,IACvB,OAEA,W,SCyBIC,EAvCQ,SAAC7G,GACtB,IAAOsD,EAAwBtD,EAAxBsD,KAAM1C,EAAkBZ,EAAlBY,KAAMjC,EAAYqB,EAAZrB,SACb+B,EAAOjC,YAAWmC,EAAMjC,EAAU,KAClC2C,EAAOZ,GAAQ,GAAKA,GAAQ,GAAK,MAAQ,QAC/C,GAAI4C,EACF,OAAQA,GACN,IAAK,YACH,MAAO,MACT,IAAK,cACH,MAAO,QACT,IAAK,OACH,MAAM,GAAN,OAAUhC,EAAV,SACF,IAAK,OACH,MAAM,GAAN,OAAUA,EAAV,SACF,IAAK,QACH,MAAO,QACT,IAAK,OAEL,IAAK,MACH,MAAM,GAAN,OAAUA,EAAV,WACF,IAAK,SACH,MAAO,SACT,IAAK,oBACH,MAAO,aACT,IAAK,sBACH,MAAO,eACT,IAAK,OACH,MAAO,OACT,IAAK,eACH,MAAO,UACT,IAAK,UACH,MAAO,aACT,QACE,MAAO,QAGb,MAAO,SCzCHwF,EAAO,SAAAC,GACX,OAAOC,KAAKC,MAAqB,GAAbF,EAAO,IAAW,I,kBC0CzBG,EAvBc,SAAC,GAAY,IAAX5F,EAAU,EAAVA,KAoB7B,MAnBmB,CACjB,aAAc,kBAAC,IAAD,MACd,eAAgB,kBAAC,IAAD,MAChB,eAAgB,kBAAC,IAAD,MAChB,iBAAkB,kBAAC,IAAD,MAClB,aAAc,kBAAC,IAAD,MACd,QAAS,kBAAC,IAAD,MACT6F,GAAI,kBAAC,IAAD,MACJ,WAAY,kBAAC,IAAD,MACZC,MAAO,kBAAC,IAAD,MACP,aAAc,kBAAC,IAAD,MACdC,KAAM,kBAAC,IAAD,MACN,YAAa,kBAAC,IAAD,MACbC,KAAM,kBAAC,IAAD,MACN,UAAW,kBAAC,IAAD,MACXpH,QAAS,kBAAC,IAAD,MACTG,OAAQ,kBAAC,IAAD,OAGQiB,IAAS,kBAAC,IAAD,OC6GdiG,EAzIa,SAAC,GAAsB,IAArB9H,EAAoB,EAApBA,eAC5B,EAAyCyE,qBAAWsD,KAA7CC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,kBACdC,EAAY,SAACC,GAEjBlF,YAAM,CACJC,SAAU,eACVC,OAAQ,WACRC,MAAO+E,IAETF,EAAkBE,IAOdC,EAAoB,SAACvG,GACzB,MAAuB,MAAhBmG,EACHT,KAAKC,MAAMxH,EAAe,GAAD,OAAI6B,KAC7BwF,EAAKrH,EAAe,GAAD,OAAI6B,MAS7B,OACE,kBAAC,WAAD,KACE,yBAAKwE,UAAU,qFACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,iEACb,yBAAKA,UAAU,6CACb,6BACGe,EAAepH,GAAgBqI,WAAW,MACzC,uBACEhC,UAAU,wBACVE,MAAOvG,EAAesI,SAEpB,kBAAC,EAAD,CACEzG,KAAMuF,EAAepH,MAK3B,yBACEuI,IAAG,UCzDO,IDyDP,oBAA6BnB,EAC9BpH,GADC,QAGHwI,IAAI,OACJjC,MAAOvG,EAAesI,QACtBjC,UAAU,kDAIhB,uBAAGA,UAAU,oEACVrG,EAAesI,UAGpB,yBAAKjC,UAAU,oDACb,6BACE,0BAAMA,UAAU,sBACb+B,EAAkB,iBAGvB,uBAAG/B,UAAU,kBACX,mCAEF,yBAAKA,UAAU,uBACb,0BACEA,UAAS,yBACS,MAAhB2B,EACI,kCACA,yBAENzB,MAAM,UACNC,QAAS,kBAAM0B,EAAU,OAP3B,KAUA,0BAAM7B,UAAS,mBAAf,KACA,0BACEA,UAAS,yBACS,MAAhB2B,EACI,kCACA,yBAENzB,MAAM,aACNC,QAAS,kBAAM0B,EAAU,OAP3B,SAeR,yBAAK7B,UAAU,wEACb,uBAAGA,UAAU,wDACVrG,EAAesI,SAElB,yBAAKjC,UAAU,wCACb,yBAAKA,UAAU,yBACb,uBAAGA,UAAU,cAAb,aADF,OAEE,uBAAGA,UAAU,kBACVkB,KAAKC,MAAgC,IAA1BxH,EAAeyI,WAE7B,uBAAGpC,UAAU,gBACX,kBAAC,IAAD,QAGJ,yBAAKA,UAAU,6BACb,2BACE,0BAAMA,UAAU,cAAhB,SADF,OAEE,0BAAMA,UAAU,aA3FH,WACzB,MAAuB,MAAhB2B,EAAA,UACAT,KAAKC,MAAMxH,EAAe0I,WAD1B,mBEnCEtG,EFqCGpC,EAAe0I,UEpCtBnB,KAAKC,MAAc,IAARpF,IFkCT,SEnCE,IAAAA,EF6HgCuG,GAA7B,MAEF,uBAAGtC,UAAU,YAET,kBAAC,EAAD,CACExE,KAAMqF,EAAiBlH,EAAe4I,iBAK9C,2BACE,0BAAMvC,UAAU,sBAAhB,eADF,OAEE,0BAAMA,UAAU,aACb+B,EAAkB,wBAErB,wC,iBGhHCS,EArBiB,SAAC,GAAwC,IAAvC7I,EAAsC,EAAtCA,eAAgBuE,EAAsB,EAAtBA,QAAS3E,EAAa,EAAbA,QACzD,OACE,kBAACkJ,EAAA,EAAD,KACE,kBAAC,WAAD,KACGvE,GAAWvE,EACV,6BACE,kBAAC,EAAD,CACEuE,QAASA,EACT3E,QAASA,EACTI,eAAgBA,IAElB,kBAAC,EAAD,CAAqBA,eAAgBA,KAGvC,kBAAC+I,EAAA,EAAD,S,kCC0EKC,EArFM,SAACC,GACpB,IAAOxH,EAA6BwH,EAA7BxH,IAAKyH,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,cACZnB,EAAevD,qBAAWsD,KAA1BC,YACP,EAA4BvD,qBAAW2E,KAAhCC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,WAMRlB,EAAoB,SAACvG,GACzB,MAAuB,MAAhBmG,EACHT,KAAKC,MAAM/F,EAAI,cAAD,OAAeI,KAC7BwF,EAAK5F,EAAI,cAAD,OAAeI,MAQ7B,OACE,yBACEwE,UAAS,sBAAiBiD,EAAjB,0BAA6CD,EAA7C,+EACPH,IAAUC,EAAV,aAAgCG,EAAhC,iBAAmDD,GAAU,IAE/D7C,QATgB,WAClByC,EAAMM,YAAY,CAAC9H,UASjB,yBAAK4E,UAAU,wFACb,uBAAGA,UAAU,kEACVrH,YAAWyC,EAAIN,KAAMM,EAAIvC,SAAU,QAGtC,yBAAKmH,UAAU,wBACZe,EAAe3F,GAAK4G,WAAW,MAC9B,uBACEhC,UAAU,wCACVE,MAAO9E,EAAI6G,SACX,kBAAC,EAAD,CAAsBzG,KAAMuF,EAAe3F,MAG7C,yBACE8G,IAAG,UHhDa,IGgDb,oBAA6BnB,EAAe3F,GAA5C,QACH+G,IAAI,OACJjC,MAAO9E,EAAI6G,QACXjC,UAAU,wEAKhB,yBAAKA,UAAU,qFACb,uBAAGA,UAAU,2BACV+B,EAAkB,QACnB,mCAEF,uBAAG/B,UAAU,gBACV+B,EAAkB,OACnB,oCAIJ,yBACE/B,UAAS,UACmB,OADnB,oGAGT,yBAAKA,UAAU,6EACb,uBACEA,UAAU,4CACVE,MAAM,WACN,kBAAC,EAAD,CAAsB1E,KAAK,aAE7B,2BAAI7C,YAAWyC,EAAId,YAAac,EAAIvC,SAAU,UAEhD,yBAAKmH,UAAU,6EACb,uBACEA,UAAU,4CACVE,MAAM,UACN,kBAAC,EAAD,CAAsB1E,KAAK,YAE7B,2BAAI7C,YAAWyC,EAAIZ,WAAYY,EAAIvC,SAAU,eC/B1CsK,EA9CY,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACpBzB,EAAevD,qBAAWsD,KAA1BC,YACAsB,EAAc7E,qBAAW2E,KAAzBE,WAMDlB,EAAoB,SAACvG,GACzB,MAAuB,MAAhBmG,EACHT,KAAKC,MAAMiC,EAAU,GAAD,OAAI5H,KACxBwF,EAAKoC,EAAU,GAAD,OAAI5H,MAGxB,OACE,yBACEwE,UAAS,gGAA2FiD,EAA3F,mBACT,6BACGlC,EAAeqC,GAAWpB,WAAW,MACpC,uBAAGhC,UAAU,gBAAgBE,MAAOkD,EAAUnB,SAC5C,kBAAC,EAAD,CAAsBzG,KAAMuF,EAAeqC,MAG7C,yBACElB,IAAG,UJhCe,IIgCf,oBAA6BnB,EAAeqC,GAA5C,QACHjB,IAAI,OACJjC,MAAOkD,EAAUnB,QACjBjC,UAAU,8BAIhB,uBAAGA,UAAU,kBACV+B,EAAkB,eACnB,mCAEF,uBAAG/B,UAAU,gBACV+B,EAAkB,uBACnB,mCAEF,uBAAG/B,UAAU,uBACVrH,YAAWyK,EAAUtI,KAAMsI,EAAUvK,SAAU,a,kBCgFzCwK,EAtHW,SAAC,GAAiD,IAAhDjE,EAA+C,EAA/CA,SAAUzF,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,gBACpD,EAAsC0E,mBAAS,IAA/C,mBAAO4E,EAAP,KAAoBI,EAApB,KACA,EAAgDhF,mBAAS,GAAzD,mBAAOiF,EAAP,KAAyBC,EAAzB,KACO1I,EAAkBnB,EAAlBmB,KAAMjC,EAAYc,EAAZd,SAGP4K,EAAiB,uCAAG,4BAAA/J,EAAA,sDAEnB8F,YAAY7F,EAAemB,QACxB4I,EAAQ/K,YAAWmC,EAAMjC,EAAU,cAEpCoH,YAAQrG,IAAqB4F,YAAY5F,KAC5C0J,EAAe1J,EAAgBuB,KAAKuI,GAASA,EAAQ,IACrDC,EAAwB/J,EAAgBuB,KAAKuI,GAASA,EAAQ,MAP1C,2CAAH,qDAajBC,EAA0B,SAAAT,GAC9B,IAAML,EAAQ9H,OAAOC,KAAKpB,EAAgBuB,MAAMyI,QAAQV,GACxDM,GAA+B,IAAXX,EAAeA,EAAQ,IAiB7C,OALAnD,qBAAU,WACR+D,MAEC,CAAC7J,IAGF,kBAAC6I,EAAA,EAAD,KACE,kBAAC,WAAD,KACIxC,YAAQrG,EAAgBuB,OAAU8E,YAAQiD,GA2D1C,yBAAKlD,UAAU,QACZC,YAAQrG,EAAgBuB,MACvB,kBAAC0I,EAAA,EAAD,CACEC,aAAc,4CACdC,cAAc,IAGhB,kBAACrB,EAAA,EAAD,CACEsB,WAAU,+CAA0C5E,MAlE1D,kBAAC,WAAD,KAEE,yBAAKY,UAAU,kBACZpG,EAAgBa,WAAWyI,GAC1B,kBAAC,IAAa3H,YAAiB,QAC5B3B,EAAgBa,WAAWyI,GAAae,KACvC,SAACb,EAAWP,GACV,OACE,kBAAC,EAAD,CAAoBO,UAAWA,EAAWc,IAAKrB,QAMvD,kBAACgB,EAAA,EAAD,CACEC,aAAY,2CAAsCZ,MAMxD,yBAAKlD,UAAU,kCACZpG,EAAgBa,WAAWyI,GAC1B,kBAAC,IAAa3H,YAAiB,OAAQ,UACpC3B,EAAgBa,WAAWyI,GAAae,KACvC,SAACb,EAAWP,GACV,OACE,kBAAC,EAAD,CAAoBO,UAAWA,EAAWc,IAAKrB,QAMvD,kBAACgB,EAAA,EAAD,CACEC,aAAY,2CAAsCZ,MAMxD,yBACElD,UAAS,yDACRjF,OAAOC,KAAKpB,EAAgBuB,MAAM8I,KAAI,SAAC7I,EAAKyH,GAG3C,OACE,kBAAC,EAAD,CACEzH,IAAKxB,EAAgBuB,KAAKC,GAC1B8I,IAAKrB,EACLA,MAAOA,EACPC,cAAeS,EACfL,YAAa,kBAjEN,SAAA9H,GACvBkI,EAAelI,GACfuI,EAAwBvI,GA+DW+I,CAAiB/I,c,0BC/BzCgJ,EApEQ,SAAC,GAAa,IAAZ/I,EAAW,EAAXA,MAChBxC,EAAuCwC,EAAvCxC,SAAUqH,EAA6B7E,EAA7B6E,MAAOpF,EAAsBO,EAAtBP,KAAMuJ,EAAgBhJ,EAAhBgJ,QAASC,EAAOjJ,EAAPiJ,IACvC,EAA4BlG,qBAAW2E,KAAhCC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,WACRsB,EAAY5L,YAAWmC,EAAMjC,EAAU,eACvC2L,EAAU7L,YAAW0L,EAASxL,EAAU,eACxC4L,EAAWpJ,EAAMoJ,UAAY,UAC7BC,EAAUrJ,EAAMqJ,QAEhBC,EAA6B,YAAbF,EAAyB,MAAQ,SAEvD,OACE,yBAAKzE,UAAW,6CACd,yBAAKA,UAAS,iCACZ,yBACEA,UAAS,aAAQgD,EAAR,qCAA0C2B,EAA1C,gCAA+E1B,EAA/E,wBACT2B,KAAK,SACL,yBAAK5E,UAAU,QACb,yBAAKA,UAAU,aACC,UAAbyE,EACC,kBAAC,IAAD,CAAOzE,UAAU,sBAAsBE,MAAOuE,IAE9C,kBAAC,IAAD,CACEzE,UAAS,eAAU2E,EAAV,gBACTzE,MAAOuE,KAIb,yBAAKzE,UAAU,UACb,yBAAKA,UAAU,gEACb,uBAAGA,UAAU,iCACA,YAAVE,EAAsBuE,EAAWvE,GAEpC,uBAAGF,UAAU,gDACX,8BAAOuE,GADT,OAEQ,mCAFR,OAGE,8BAAOC,KAKVzK,YAAQ2K,GACP,uBAAG1E,UAAU,4BACX,2CACC0E,EAAQT,KAAI,SAACY,EAAQhC,GACpB,OACE,uBAAGqB,IAAKrB,GACLgC,EACAhC,IAAU6B,EAAQrF,OAAS,EAAI,IAAM,UAK5C,KACJ,uBACEyF,KAAMR,EACNS,OAAO,SACPC,IAAI,sBACJhF,UAAS,kDAA6CgD,IAJxD,sBC6FCiC,IA7IkB,SAAC,GAM3B,IALLtL,EAKI,EALJA,eACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,OACAqE,EAEI,EAFJA,QACA3E,EACI,EADJA,QAEA,EAA4B6E,qBAAW2E,KAAhCC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,WAYRiC,EAAc,CAClBC,oBAAqB,OACrBC,qBAAsB,QAGxB,EAAoC9G,oBAAS,GAA7C,mBAAO+G,EAAP,KAAmBC,EAAnB,KAMA,OACE,kBAAC,WAAD,KACE,yBACEtF,UAAW,2DACX,yBACEA,UAAS,6CAAwCgD,EAAxC,iBAAsDC,EAAtD,0BAAkFA,EAAlF,4CACT,yBAAKjD,UAAU,4BACb,yBACEkC,IAAG,UP/Ca,IO+Cb,gCAAyC3E,EAC1C5D,GADC,QAGHwI,IAAI,YACJnC,UAAU,uDACVuF,MAAOL,IAGT,6BArCQ,CAAC,OAAQ,OAAQ,QAAS,QAsCrBjK,SAAStB,EAAe6D,OACjC,yBACE0E,IAAG,UP1DS,IO0DT,gCApCW,SAAxBvI,EAAe6D,KACV,OAEF,OAiCU,QACH2E,IAAI,YACJnC,UAAU,8FACVuF,MAAOL,KAMb,yBACElF,UAAU,oFACVuF,MAAK,aAAGC,WAAY,mBAAsBN,IAC1C,kBAAC,EAAD,CACEvL,eAAgBA,EAChBuE,QAASA,EACT3E,QAASA,KAKb,yBACEyG,UAAU,oFACVuF,MAAK,aAAGC,WAAY,mBAAsBN,IAC1C,kBAAC,EAAD,CACEvL,eAAgBA,EAChBuE,QAASA,EACT3E,QAASA,IAEX,kBAAC,EAAD,CACE6F,SAAUlB,EAAQkB,SAClBzF,eAAgBA,EAChBC,gBAAiBA,MAKvB,yBAAKoG,UAAU,mBACb,kBAAC,EAAD,CACEZ,SAAUlB,EAAQkB,SAClBzF,eAAgBA,EAChBC,gBAAiBA,OAMzB,yBAAKoG,UAAU,YACb,uBACEA,UAAS,iEAA4DiD,EAA5D,eAA6ED,IADxF,iBAGE,uBACE8B,KAAK,iCACLC,OAAO,SACPC,IAAI,sBACJhF,UAAS,0CAAqCgD,GAC9C7C,QAAS,kBAAMzD,YAAO,aAAc,cALtC,aAWAuD,YAAQpG,GAyBN,KAxBF,kBAAC,WAAD,KACE,yBAAKmG,UAAU,oBACb,2BACE,4BACEA,UAAS,aAAQiD,EAAR,iBAA2BD,EAA3B,oDACT7C,QA1FY,WAC1BmF,GAAeD,KA0FAA,EAAa,OAAS,OAHzB,qBAOJ,yBAAKrF,UAAU,QACZqF,EACC,kBAAC,WAAD,KACGxL,EAAOoK,KAAI,SAAC5I,EAAOwH,GAClB,OACE,yBAAK7C,UAAU,OAAOkE,IAAKrB,GACzB,kBAAC,EAAD,CAAgBxH,MAAOA,SAK7B,W","file":"static/js/1.e78f5e29.chunk.js","sourcesContent":["import moment from 'moment-timezone'\n\n/**\n * @param {Number} timestamp\n * @param {String} timezone\n * @param {String} formatType (moment format types)\n */\nconst FormatTime = (timestamp, timezone, formatType) => {\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\n}\n\nexport default FormatTime\n","import axios from 'axios'\nimport axiosRetry from 'axios-retry'\nimport FormatTime from './FormatTime'\nimport * as Sentry from '@sentry/browser'\nimport API_URL from './API'\nimport isValid from './ValidityChecker'\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\n\nconst getURL = (latlong) => {\n  return `${API_URL}/forecast/coords/${latlong}?extend=hourly&exclude=minutely,flags`\n}\n\n/**\n * @param {String} latlong (-43.53333,172.63333)\n */\nconst FetchWeatherData = async ({latlong}) => {\n  let weatherCurrent = {}\n  let weatherForecast = {}\n  let alerts = []\n  let error = null\n\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\n  if (isValid(latlong)) {\n    try {\n      const weatherData = (await axios.get(getURL(latlong))).data\n      if (isValid(weatherData)) {\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\n        // displaying weatherIcon with day or night variants specific to location timezone\n        // parsing sunriseTime & sunsetTime according to the timezone\n        const timezone = weatherData.timezone\n\n        weatherCurrent = {\n          timezone,\n          ...weatherData.currently,\n          sunrise: weatherData.daily.data[0].sunriseTime,\n          sunset: weatherData.daily.data[0].sunsetTime,\n        }\n\n        // group 168 hours into days as keys in timeFrames\n        // group days and timeFrames into weatherForecast\n        const timeFrames = {}\n        // create date as the keys for timeFrame in timeFrames\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\n        weatherData.hourly.data.forEach((hour) => {\n          const date = FormatTime(hour.time, timezone, 'MM/DD/YYYY')\n          if (Object.keys(timeFrames).includes(date)) {\n            timeFrames[date].push({timezone, ...hour})\n          } else {\n            timeFrames[date] = [{timezone, ...hour}]\n          }\n        })\n        const days = {}\n        // create date as the keys for the day in days\n        // i.e days: {'02/28/2020': {...day}, ...}\n        weatherData.daily.data.forEach((day) => {\n          const date = FormatTime(day.time, timezone, 'MM/DD/YYYY')\n          // since there will be unique day objects in days\n          // just create a 'date' key with day object as value for as many days\n          days[date] = {timezone, ...day}\n        })\n\n        weatherForecast = {timeFrames, days}\n\n        if (isValid(weatherData.alerts)) {\n          weatherData.alerts.forEach((alert) => {\n            alerts.push({\n              timezone,\n              ...alert,\n            })\n          })\n        }\n      }\n    } catch (err) {\n      error = err\n      Sentry.captureException(err)\n    }\n  }\n\n  return {\n    weatherCurrent,\n    weatherForecast,\n    alerts,\n    error,\n  }\n}\n\nexport default FetchWeatherData\n","// modify carousel settings for timeframe and favorites component\n/**\n * time or favorite\n * @param {String} type\n * resolution can be mobile or tablet\n * @param {*} resolution\n */\nconst CarouselSettings = (type, resolution = 'mobile') => ({\n  width: '100%',\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  initialSlideHeight: type === 'time' ? 100 : 200,\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\n  speed: 1000,\n  easing: 'easeSinInOut',\n  defaultControlsConfig: {\n    prevButtonStyle: {\n      display: 'none',\n    },\n    nextButtonStyle: {\n      display: 'none',\n    },\n    pagingDotsStyle: {\n      fill: '#cfd9df',\n      display: 'flex',\n      position: 'relative',\n      top: type === 'day' ? '25px' : '35px',\n      margin: '10px 5px',\n    },\n  },\n})\n\nexport default CarouselSettings\n","import {Event} from './ReactAnalytics'\n\n/**\n * @param {String} type\n * @param {String} value\n */\nconst emitGA = (type, value) => {\n  switch (type) {\n    case 'favorites':\n      // track selectedFavorite to GA\n      Event({\n        category: 'Favorites',\n        action: 'Select Favorite',\n        label: value\n      })\n      break\n    case 'explore-life':\n      // track explore life click event to GA\n      Event({\n        category: 'Explore Life',\n        action: 'Click on Explore Life',\n        label: value\n      })\n      break\n    case 'powered-by':\n      // track explore life click event to GA\n      Event({\n        category: 'Powered By',\n        action: 'Click on Powered By',\n        label: value\n      })\n      break\n    default:\n      break\n  }\n}\n\nexport default emitGA\n","import moment from 'moment-timezone'\n\n/**\n * format timestamp to time in the form of \"H:mm\" where H -> 0 - 23 & mm -> 00 - 59\n * @param {String} type (sunrise | sunset | hour)\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\n * @param {String} timezone (ex- Pacific/Auckland)\n */\nconst formatTime = (type, time, timezone) => {\n  if (type === 'sunrise' || type === 'sunset') {\n    return moment(time * 1000)\n      .tz(timezone)\n      .format('H:mm')\n  }\n  return moment().tz(timezone).format('H:mm')\n}\n\n/**\n * returns day or night based on the comparison of currentTime with sunrise and sunset times\n * @param {String} currentTime\n * @param {String} sunriseTime\n * @param {String} sunsetTime\n */\nconst getType = (currentTime, sunriseTime, sunsetTime) => {\n  const [currentHour, currentMinutes] = currentTime.split(':')\n  const [sunriseHour, sunriseMinutes] = sunriseTime.split(':')\n  const [sunsetHour, sunsetMinutes] = sunsetTime.split(':')\n  if (currentHour === sunriseHour || currentHour === sunsetHour) {\n    return Number(currentMinutes) >= Number(sunriseMinutes) ||\n      Number(currentMinutes) < Number(sunsetMinutes)\n      ? 'day'\n      : 'night'\n  } else {\n    return Number(currentHour) > Number(sunriseHour) &&\n      Number(currentHour) < Number(sunsetHour)\n      ? 'day'\n      : 'night'\n  }\n}\n\n/**\n * checks if it is dawn (sunrise) or dusk (sunset)\n * @param {*} currentTime\n * @param {*} time (sunriseTime for checking dawn & sunsetTime for checking dusk)\n */\nconst isDawnDusk = (currentTime, time) => {\n  const currentHour = currentTime.split(':')[0]\n  const timeHour = time.split(':')[0]\n  return (\n    Number(currentHour) === Number(timeHour) - 1 ||\n    Number(currentHour) === Number(timeHour)\n  )\n}\n\n/**\n * @param {Object} data (weatherCurrent)\n * @param {String} icon (ex- cloudy)\n * @param {String} timezone (ex- Pacific/Auckland)\n */\nconst getWeatherBackground = (data) => {\n  const {icon, timezone, sunrise, sunset} = data\n  // format sunrise and sunset in weatherCurrent of data into hour and minutes\n  const sunriseTime = formatTime('sunrise', sunrise, timezone)\n  const sunsetTime = formatTime('sunset', sunset, timezone)\n  const currentTime = formatTime('hour', 0, timezone)\n  // get the type like day or night\n  const type = getType(currentTime, sunriseTime, sunsetTime)\n  // check for dawn scenario before sunrise hour\n  const dawn = isDawnDusk(currentTime, sunriseTime)\n  // check for dusk scenario before sunset hour\n  const dusk = isDawnDusk(currentTime, sunsetTime)\n\n  if (icon) {\n    switch (icon) {\n      case 'clear-day':\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\n      case 'clear-night':\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\n      case 'rain':\n        return `overcast-${type}`\n      case 'snow':\n        return `overcast-${type}`\n      case 'sleet':\n        return `overcast-${type}`\n      case 'wind':\n        return `cloudy-${type}`\n      case 'fog':\n        return `overcast-${type}`\n      case 'cloudy':\n        return `cloudy-${type}`\n      case 'partly-cloudy-day':\n        return `cloudy-${type}`\n      case 'partly-cloudy-night':\n        return `cloudy-${type}`\n      case 'hail':\n        return `overcast-${type}`\n      case 'thunderstorm':\n        return 'thunderstorm'\n      case 'tornado':\n        return 'tornado'\n      default:\n        return 'clear-day'\n    }\n  }\n  return 'clear-day'\n}\n\nexport default getWeatherBackground\n","import React, {useState, useEffect, useContext, useRef, Fragment} from 'react'\nimport {AddressContext} from '../../context/AddressContext'\nimport {isUndefined, isEmpty} from 'lodash-es'\nimport moment from 'moment-timezone'\nimport {PropTypes} from 'prop-types'\nimport {Event} from '../../utils/ReactAnalytics'\nimport {FaRegHeart, FaHeart} from 'react-icons/fa'\n\nconst InfoComponent = ({address, latlong, weatherCurrent}) => {\n  const {updateFavorites} = useContext(AddressContext)\n  const [date, setDate] = useState('')\n  const [time, setTime] = useState('')\n\n  /**\n   * track select favorite click event to GA\n   * @param {String} type (add or remove)\n   * @param {String} favoriteCity (name)\n   */\n  const emitFavoriteCityGA = (type, favoriteCity) => {\n    Event({\n      category: 'Favorite City',\n      action: `${type} city`,\n      label: favoriteCity,\n    })\n  }\n\n  // store formattedDateTime moment date object in the ref and update it for the first api call fetch\n  // this ref will be used to update date and time every second without making additional api calls\n  const formattedDateTimeRef = useRef()\n\n  const isBookmarked = () => {\n    if (localStorage.getItem('favorites')) {\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\n      const matched = favorites.filter(\n        (favorite) => favorite.address.cityName === address.cityName\n      )\n      return matched.length > 0\n    }\n    return false\n  }\n\n  const favoritesHandler = () => {\n    // first ever favorite item stored in localStorage\n    if (!localStorage.getItem('favorites')) {\n      localStorage.setItem('favorites', JSON.stringify([{address, latlong}]))\n      emitFavoriteCityGA('add', address.cityName)\n      updateFavorites({\n        favorites: [{address, latlong}],\n      })\n    } else {\n      const favorites = JSON.parse(localStorage.getItem('favorites'))\n      const duplicates = favorites.filter(\n        (favorite) => favorite.address.cityName === address.cityName\n      )\n      if (!duplicates.length) {\n        // add newly added favorite to old favorites\n        const updatedFavorites = [...favorites, {address, latlong}]\n        localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\n        emitFavoriteCityGA('add', address.cityName)\n        updateFavorites({\n          favorites: updatedFavorites,\n        })\n      } else {\n        // if already favorite is selected\n        // remove it from favorites\n        const removeIndex = favorites.findIndex(\n          (favorite) =>\n            favorite.address.cityName === duplicates[0].address.cityName\n        )\n        if (removeIndex !== -1) {\n          const newFavorites = [...favorites]\n          newFavorites.splice(removeIndex, 1)\n          localStorage.setItem('favorites', JSON.stringify(newFavorites))\n          emitFavoriteCityGA('remove', address.cityName)\n          updateFavorites({\n            favorites: newFavorites,\n          })\n        }\n      }\n    }\n  }\n\n  // format and set date & time based on the dateObj\n  const datetimeSetter = (dateObj) => {\n    setDate(!isUndefined(dateObj) ? dateObj.format('dddd, MMMM DD, YYYY') : '')\n    setTime(!isUndefined(dateObj) ? dateObj.format('h:mm A') : '')\n    formattedDateTimeRef.current = dateObj ? dateObj : null\n  }\n\n  useEffect(() => {\n    // reset date & time whenever weatherCurrent change\n    datetimeSetter(\n      moment(weatherCurrent.time * 1000).tz(weatherCurrent.timezone)\n    )\n\n    const dateTimer = setInterval(() => {\n      if (weatherCurrent.time) {\n        // update date and time every second only when there is a valid timestamp\n        const formattedDateTimeObj = moment\n          .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\n          .add(1, 's')\n        datetimeSetter(formattedDateTimeObj)\n      }\n    }, 1000)\n    return () => {\n      clearInterval(dateTimer)\n    }\n    // eslint-disable-next-line\n  }, [weatherCurrent])\n\n  return (\n    <div className='flex justify-between items-start'>\n      <div className='pt-4 px-4'>\n        <p className='font-bold'>{address.cityName}</p>\n        <div className='sm:flex-col md:flex md:flex-row font-light'>\n          {!isEmpty(date) && !isEmpty(time) ? (\n            <Fragment>\n              <p>\n                {date}\n                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\n              </p>\n              <p>{time}</p>\n            </Fragment>\n          ) : null}\n        </div>\n      </div>\n      <div\n        className='mt-6 mr-6 cursor-pointer text-2xl'\n        title={\n          isBookmarked()\n            ? 'Remove this city from favorites'\n            : 'Favorite this city'\n        }\n        onClick={favoritesHandler}>\n        {isBookmarked() ? <FaHeart /> : <FaRegHeart />}\n      </div>\n    </div>\n  )\n}\n\nexport default InfoComponent\n\nInfoComponent.propTypes = {\n  address: PropTypes.objectOf(PropTypes.string),\n  latlong: PropTypes.string,\n  weatherCurrent: PropTypes.object,\n}\n","/**\n * @param {Number} deg\n */\nconst getWindDirection = deg => {\n  if (deg >= 0 && deg <= 45) {\n    return 'up'\n  } else if (deg >= 46 && deg <= 90) {\n    return 'up-right'\n  } else if (deg >= 91 && deg <= 135) {\n    return 'right'\n  } else if (deg >= 136 && deg <= 180) {\n    return 'down-right'\n  } else if (deg >= 181 && deg <= 225) {\n    return 'down'\n  } else if (deg >= 226 && deg <= 270) {\n    return 'down-left'\n  } else if (deg >= 271 && deg <= 315) {\n    return 'left'\n  } else {\n    return 'up-left'\n  }\n}\n\nexport default getWindDirection\n","import FormatTime from './FormatTime'\n\n/**\n * @param {Object} data (weatherCurrent, Timeframe, day)\n */\nconst getWeatherIcon = (data) => {\n  const {icon, time, timezone} = data\n  const hour = FormatTime(time, timezone, 'H')\n  const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\n  if (icon) {\n    switch (icon) {\n      case 'clear-day':\n        return 'day'\n      case 'clear-night':\n        return 'night'\n      case 'rain':\n        return `${type}-rain`\n      case 'snow':\n        return `${type}-snow`\n      case 'sleet':\n        return 'sleet'\n      case 'wind':\n        return `${type}-cloudy`\n      case 'fog':\n        return `${type}-cloudy`\n      case 'cloudy':\n        return 'cloudy'\n      case 'partly-cloudy-day':\n        return 'day-cloudy'\n      case 'partly-cloudy-night':\n        return 'night-cloudy'\n      case 'hail':\n        return 'hail'\n      case 'thunderstorm':\n        return 'thunder'\n      case 'tornado':\n        return 'wi-tornado'\n      default:\n        return 'wi-na'\n    }\n  }\n  return 'wi-na'\n}\n\nexport default getWeatherIcon\n","const fToC = temp => {\n  return Math.round(((temp - 32) * 5) / 9)\n}\n\nconst cToF = temp => {\n  return Math.round((temp * 9) / 5 + 32)\n}\n\nexport {fToC, cToF}\n","import React from 'react'\nimport {\n  WiDirectionUp,\n  WiDirectionUpRight,\n  WiDirectionRight,\n  WiDirectionDownRight,\n  WiDirectionDown,\n  WiDirectionDownLeft,\n  WiDirectionLeft,\n  WiDirectionUpLeft,\n  WiDayFog,\n  WiNightFog,\n  WiDayCloudyWindy,\n  WiNightAltCloudyWindy,\n  WiTornado,\n  WiNa,\n  WiSunrise,\n  WiSunset\n} from 'react-icons/wi'\n\nconst WeatherIconComponent = ({type}) => {\n  const ICON_TYPES = {\n    'wi-day-fog': <WiDayFog />,\n    'wi-night-fog': <WiNightFog />,\n    'wi-day-windy': <WiDayCloudyWindy />,\n    'wi-night-windy': <WiNightAltCloudyWindy />,\n    'wi-tornado': <WiTornado />,\n    'wi-na': <WiNa />,\n    up: <WiDirectionUp />,\n    'up-right': <WiDirectionUpRight />,\n    right: <WiDirectionRight />,\n    'down-right': <WiDirectionDownRight />,\n    down: <WiDirectionDown />,\n    'down-left': <WiDirectionDownLeft />,\n    left: <WiDirectionLeft />,\n    'up-left': <WiDirectionUpLeft />,\n    sunrise: <WiSunrise />,\n    sunset: <WiSunset />\n  }\n\n  return ICON_TYPES[type] || <WiNa />\n}\n\nexport default WeatherIconComponent\n","import React, {Fragment, useContext} from 'react'\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\nimport getWindDirection from '../../utils/WindDirection'\nimport getWeatherIcon from '../../utils/WeatherIcon'\nimport {mToK} from '../../utils/SpeedConvert'\nimport {fToC} from '../../utils/TemperatureConvert'\nimport {PropTypes} from 'prop-types'\nimport {Event} from '../../utils/ReactAnalytics'\nimport {FiPercent} from 'react-icons/fi'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst InfoDetailComponent = ({weatherCurrent}) => {\n  const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\n  const unitClick = (unit) => {\n    // track event to GA\n    Event({\n      category: 'Weather Unit',\n      action: 'Set Unit',\n      label: unit,\n    })\n    updateWeatherUnit(unit)\n  }\n\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = (type) => {\n    return weatherUnit === 'F'\n      ? Math.round(weatherCurrent[`${type}`])\n      : fToC(weatherCurrent[`${type}`])\n  }\n\n  const computedSpeedValue = () => {\n    return weatherUnit === 'F'\n      ? `${Math.round(weatherCurrent.windSpeed)} mph`\n      : `${mToK(weatherCurrent.windSpeed)} kmph`\n  }\n\n  return (\n    <Fragment>\n      <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4'>\n        <div className='flex-col sm:w-full lg:w-1/2'>\n          <div className='flex flex-row justify-center sm:justify-start sm:items-center'>\n            <div className='flex flex-col justify-center items-center'>\n              <div>\n                {getWeatherIcon(weatherCurrent).startsWith('wi') ? (\n                  <p\n                    className='text-6xl sm:mx-2 mt-2'\n                    title={weatherCurrent.summary}>\n                    {\n                      <WeatherIconComponent\n                        type={getWeatherIcon(weatherCurrent)}\n                      />\n                    }\n                  </p>\n                ) : (\n                  <img\n                    src={`${AssetsSrcURL}/weather/${getWeatherIcon(\n                      weatherCurrent\n                    )}.svg`}\n                    alt='icon'\n                    title={weatherCurrent.summary}\n                    className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\n                  />\n                )}\n              </div>\n              <p className='hidden sm:flex sm:flex-no-wrap font-medium -mt-2 ml-3 capitalize'>\n                {weatherCurrent.summary}\n              </p>\n            </div>\n            <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\n              <div>\n                <span className='text-6xl font-bold'>\n                  {computedTempValue('temperature')}\n                </span>\n              </div>\n              <p className='-mt-8 text-3xl'>\n                <sup>o</sup>\n              </p>\n              <div className='-mt-10 mx-2 text-xl'>\n                <span\n                  className={`cursor-pointer ${\n                    weatherUnit === 'C'\n                      ? 'font-bold border-b border-light'\n                      : 'font-light opacity-75'\n                  }`}\n                  title='Celcius'\n                  onClick={() => unitClick('C')}>\n                  C\n                </span>\n                <span className={`mx-1 opacity-25`}>|</span>\n                <span\n                  className={`cursor-pointer ${\n                    weatherUnit === 'F'\n                      ? 'font-bold border-b border-light'\n                      : 'font-light opacity-75'\n                  }`}\n                  title='Fahrenheit'\n                  onClick={() => unitClick('F')}>\n                  F\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* weather info */}\n        <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\n          <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\n            {weatherCurrent.summary}\n          </p>\n          <div className='text-sm sm:text-lg ml-8 mt-3 sm:mt-0'>\n            <div className='flex flex-row sm:my-2'>\n              <p className='font-light'>Humidity:</p>&nbsp;\n              <p className='mx-1 font-bold'>\n                {Math.round(weatherCurrent.humidity * 100)}\n              </p>\n              <p className='text-sm mt-1'>\n                <FiPercent />\n              </p>\n            </div>\n            <div className='flex items-center sm:my-2'>\n              <p>\n                <span className='font-light'>Wind:</span>&nbsp;\n                <span className='font-bold'>{computedSpeedValue()} </span>\n              </p>\n              <p className='text-3xl'>\n                {\n                  <WeatherIconComponent\n                    type={getWindDirection(weatherCurrent.windBearing)}\n                  />\n                }\n              </p>\n            </div>\n            <p>\n              <span className='font-light sm:my-2'>Feels like:</span>&nbsp;\n              <span className='font-bold'>\n                {computedTempValue('apparentTemperature')}\n              </span>\n              <sup>o</sup>\n            </p>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default InfoDetailComponent\n\nInfoDetailComponent.propTypes = {\n  weatherCurrent: PropTypes.object,\n}\n","// this URL points to the root directory of the app based on dev or prod environment\nconst isProduction = process.env.NODE_ENV === 'production'\nexport default isProduction ? '.' : './weather-react'\n","const mToK = speed => {\n  return Math.round(speed * 1.6)\n}\n\nconst kToM = speed => {\n  return Math.round(speed * 0.6)\n}\n\nexport {mToK, kToM}\n","import React, {Fragment} from 'react'\nimport InfoComponent from '../../components/weather/InfoComponent'\nimport InfoDetailComponent from '../../components/weather/InfoDetailComponent'\nimport LoaderComponent from './../../components/loader/LoaderComponent'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nimport {PropTypes} from 'prop-types'\n\nconst CurrentWeatherContainer = ({weatherCurrent, address, latlong}) => {\n  return (\n    <ErrorBoundaryContainer>\n      <Fragment>\n        {address && weatherCurrent ? (\n          <div>\n            <InfoComponent\n              address={address}\n              latlong={latlong}\n              weatherCurrent={weatherCurrent}\n            />\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\n          </div>\n        ) : (\n          <LoaderComponent />\n        )}\n      </Fragment>\n    </ErrorBoundaryContainer>\n  )\n}\n\nexport default CurrentWeatherContainer\n\nCurrentWeatherContainer.propTypes = {\n  address: PropTypes.objectOf(PropTypes.string),\n  latlong: PropTypes.string,\n  weatherCurrent: PropTypes.object,\n}\n","import React, {useContext} from 'react'\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\nimport {fToC} from '../../utils/TemperatureConvert'\nimport getWeatherIcon from '../../utils/WeatherIcon'\nimport FormatTime from './../../utils/FormatTime'\nimport {PropTypes} from 'prop-types'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst DayComponent = (props) => {\n  const {day, index, selectedIndex} = props\n  const {weatherUnit} = useContext(WeatherUnitContext)\n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  /**\n   * type can be 'High' or 'Low'\n   * @param {String} type\n   */\n  const computedTempValue = (type) => {\n    return weatherUnit === 'F'\n      ? Math.round(day[`temperature${type}`])\n      : fToC(day[`temperature${type}`])\n  }\n\n  // emit event to forecastContainer\n  const selectedDay = () => {\n    props.selectedDay({day})\n  }\n\n  return (\n    <div\n      className={`md:hover:bg-${colorTheme} md:hover:text-${theme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer  ${\n        index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\n      }`}\n      onClick={selectedDay}>\n      <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\n        <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-semibold'>\n          {FormatTime(day.time, day.timezone, 'ddd')}\n        </p>\n        {/* icon */}\n        <div className='flex w-1/6 sm:w-full'>\n          {getWeatherIcon(day).startsWith('wi') ? (\n            <p\n              className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\n              title={day.summary}>\n              <WeatherIconComponent type={getWeatherIcon(day)} />\n            </p>\n          ) : (\n            <img\n              src={`${AssetsSrcURL}/weather/${getWeatherIcon(day)}.svg`}\n              alt='icon'\n              title={day.summary}\n              className='sm:-mt-2 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\n            />\n          )}\n        </div>\n        {/* high & low */}\n        <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\n          <p className='mx-2 text-xs sm:text-sm'>\n            {computedTempValue('High')}\n            <sup>o</sup>\n          </p>\n          <p className='mx-2 text-xs'>\n            {computedTempValue('Low')}\n            <sup>o</sup>\n          </p>\n        </div>\n        {/* sunrise & sunset */}\n        <div\n          className={`${\n            index === selectedIndex ? 'flex' : 'flex'\n          } flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\n            <p\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\n              title='sunrise'>\n              <WeatherIconComponent type='sunrise' />\n            </p>\n            <p>{FormatTime(day.sunriseTime, day.timezone, 'h:mm')}</p>\n          </div>\n          <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\n            <p\n              className='text-xl lg:text-2xl text-sun mr-2 md:mr-1'\n              title='sunset'>\n              <WeatherIconComponent type='sunset' />\n            </p>\n            <p>{FormatTime(day.sunsetTime, day.timezone, 'HH:mm')}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DayComponent\n\nDayComponent.propTypes = {\n  day: PropTypes.object,\n  selectedDay: PropTypes.func,\n  index: PropTypes.number,\n  selectedIndex: PropTypes.number,\n}\n","import React, {useContext} from 'react'\nimport {WeatherUnitContext} from '../../context/WeatherUnitContext'\nimport {fToC} from '../../utils/TemperatureConvert'\nimport getWeatherIcon from '../../utils/WeatherIcon'\nimport FormatTime from './../../utils/FormatTime'\nimport {PropTypes} from 'prop-types'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\n\nconst TimeframeComponent = ({Timeframe}) => {\n  const {weatherUnit} = useContext(WeatherUnitContext)\n  const {colorTheme} = useContext(ThemeContext)\n\n  /**\n   * type can be `temperature` or `apparentTemperature`\n   * @param {String} type\n   */\n  const computedTempValue = (type) => {\n    return weatherUnit === 'F'\n      ? Math.round(Timeframe[`${type}`])\n      : fToC(Timeframe[`${type}`])\n  }\n\n  return (\n    <div\n      className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light`}>\n      <div>\n        {getWeatherIcon(Timeframe).startsWith('wi') ? (\n          <p className='text-5xl mt-4' title={Timeframe.summary}>\n            <WeatherIconComponent type={getWeatherIcon(Timeframe)} />\n          </p>\n        ) : (\n          <img\n            src={`${AssetsSrcURL}/weather/${getWeatherIcon(Timeframe)}.svg`}\n            alt='icon'\n            title={Timeframe.summary}\n            className='w-16 h-16 object-contain'\n          />\n        )}\n      </div>\n      <p className='text-base pb-1'>\n        {computedTempValue('temperature')}\n        <sup>o</sup>\n      </p>\n      <p className='text-xs pb-1'>\n        {computedTempValue('apparentTemperature')}\n        <sup>o</sup>\n      </p>\n      <p className='text-sm font-medium'>\n        {FormatTime(Timeframe.time, Timeframe.timezone, 'h:mm A')}\n      </p>\n    </div>\n  )\n}\n\nexport default TimeframeComponent\n\nTimeframeComponent.propTypes = {\n  Timeframe: PropTypes.object,\n}\n","import React, {useState, useEffect, Fragment} from 'react'\nimport {isEmpty, isUndefined} from 'lodash-es'\nimport Carousel from 'nuka-carousel'\nimport DayComponent from '../../components/weather/DayComponent'\nimport TimeframeComponent from '../../components/weather/TimeframeComponent'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport CarouselSettings from '../../utils/CarouselSettings'\nimport ErrorComponent from './../../components/error/ErrorComponent'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nimport FormatTime from './../../utils/FormatTime'\nimport {PropTypes} from 'prop-types'\n\nconst ForecastContainer = ({cityName, weatherCurrent, weatherForecast}) => {\n  const [selectedDay, setSelectedDay] = useState('')\n  const [selectedDayIndex, setSelectedDayIndex] = useState(0)\n  const {time, timezone} = weatherCurrent\n\n  // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\n  const updateSelectedDay = async () => {\n    // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\n    if (!isUndefined(weatherCurrent.time)) {\n      const today = FormatTime(time, timezone, 'MM/DD/YYYY')\n      // check if today key exist in days\n      if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\n        setSelectedDay(weatherForecast.days[today] ? today : '')\n        selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\n      }\n    }\n  }\n\n  // find the index of selectedDay in days object\n  const selectedDayIndexHandler = selectedDay => {\n    const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\n    setSelectedDayIndex(index !== -1 ? index : 0)\n  }\n\n  /**\n   * day is a date '02/28/2020'\n   * @param {String} day\n   */\n  const daySelectHandler = day => {\n    setSelectedDay(day)\n    selectedDayIndexHandler(day)\n  }\n\n  useEffect(() => {\n    updateSelectedDay()\n    // eslint-disable-next-line\n  }, [weatherForecast])\n\n  return (\n    <ErrorBoundaryContainer>\n      <Fragment>\n        {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\n          <Fragment>\n            {/* mobile */}\n            <div className='sm:hidden pb-3'>\n              {weatherForecast.timeFrames[selectedDay] ? (\n                <Carousel {...CarouselSettings('time')}>\n                  {weatherForecast.timeFrames[selectedDay].map(\n                    (Timeframe, index) => {\n                      return (\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\n                      )\n                    }\n                  )}\n                </Carousel>\n              ) : (\n                <ErrorComponent\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\n                />\n              )}\n            </div>\n\n            {/* tablet and above devices */}\n            <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\n              {weatherForecast.timeFrames[selectedDay] ? (\n                <Carousel {...CarouselSettings('time', 'tablet')}>\n                  {weatherForecast.timeFrames[selectedDay].map(\n                    (Timeframe, index) => {\n                      return (\n                        <TimeframeComponent Timeframe={Timeframe} key={index} />\n                      )\n                    }\n                  )}\n                </Carousel>\n              ) : (\n                <ErrorComponent\n                  errorMessage={`No hourly forecast available for ${selectedDay}`}\n                />\n              )}\n            </div>\n\n            {/* day */}\n            <div\n              className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\n              {Object.keys(weatherForecast.days).map((day, index) => {\n                // day is key in weatherForecast.days -> '02/28/2020'\n                // index is the position of key -> 0\n                return (\n                  <DayComponent\n                    day={weatherForecast.days[day]}\n                    key={index}\n                    index={index}\n                    selectedIndex={selectedDayIndex}\n                    selectedDay={() => daySelectHandler(day)}\n                  />\n                )\n              })}\n            </div>\n          </Fragment>\n        ) : (\n          <div className='mb-3'>\n            {isEmpty(weatherForecast.days) ? (\n              <ErrorComponent\n                errorMessage={'No forecast data available for this city!'}\n                showCloseBtn={false}\n              />\n            ) : (\n              <LoaderComponent\n                loaderText={`Fetching 7 days weather forecast for ${cityName}`}\n              />\n            )}\n          </div>\n        )}\n      </Fragment>\n    </ErrorBoundaryContainer>\n  )\n}\n\nexport default ForecastContainer\n\nForecastContainer.propTypes = {\n  cityName: PropTypes.string,\n  weatherCurrent: PropTypes.object,\n  weatherForecast: PropTypes.object\n}\n","import React, {useContext} from 'react'\nimport {FaExclamationTriangle, FaEye} from 'react-icons/fa'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport FormatTime from './../../utils/FormatTime'\nimport isValid from '../../utils/ValidityChecker'\n\nconst AlertComponent = ({alert}) => {\n  const {timezone, title, time, expires, uri} = alert\n  const {theme, colorTheme} = useContext(ThemeContext)\n  const startTime = FormatTime(time, timezone, 'dddd h:mm A')\n  const endTime = FormatTime(expires, timezone, 'dddd h:mm A')\n  const severity = alert.severity || 'warning'\n  const regions = alert.regions\n\n  const severityColor = severity === 'warning' ? 'red' : 'orange'\n\n  return (\n    <div className={'flex flex-col justify-center items-center'}>\n      <div className={`w-11/12 lg:w-3/4 xl:max-w-5xl`}>\n        <div\n          className={`bg-${theme} border-t-4 border border-${severityColor}-700 rounded-lg text-${colorTheme} px-3 py-3 shadow-xl`}\n          role='alert'>\n          <div className='flex'>\n            <div className='pt-1 px-2'>\n              {severity === 'watch' ? (\n                <FaEye className='text-toggle text-lg' title={severity} />\n              ) : (\n                <FaExclamationTriangle\n                  className={`text-${severityColor}-700 text-lg`}\n                  title={severity}\n                />\n              )}\n            </div>\n            <div className='w-full'>\n              <div className='flex flex-col sm:flex-row sm:justify-between sm:items-center'>\n                <p className='sm:w-1/2 font-bold capitalize'>\n                  {title === 'No Text' ? severity : title}\n                </p>\n                <p className='sm:w-1/2 sm:text-right font-semibold text-xs'>\n                  <span>{startTime}</span>\n                  &nbsp;<span>-</span>&nbsp;\n                  <span>{endTime}</span>\n                </p>\n              </div>\n              {/* <p className='text-sm lowercase py-1'>{description}</p> */}\n              {/* regions */}\n              {isValid(regions) ? (\n                <p className='text-sm font-medium py-2'>\n                  <b>Regions:&nbsp;</b>\n                  {regions.map((region, index) => {\n                    return (\n                      <i key={index}>\n                        {region}\n                        {index === regions.length - 1 ? '.' : ', '}\n                      </i>\n                    )\n                  })}\n                </p>\n              ) : null}\n              <a\n                href={uri}\n                target='_blank'\n                rel='noreferrer noopener'\n                className={`link z-0 text-xs font-medium hover:text-${theme}`}>\n                View Details\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default AlertComponent\n","import React, {useContext, Fragment, useState} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport getWeatherBackground from './../../utils/WeatherBackground'\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\nimport ForecastContainer from './../forecast/ForecastContainer'\nimport emitGA from './../../utils/MiscTrackEvents'\nimport './WeatherForecastStyle.scss'\nimport AssetsSrcURL from '../../utils/AssetsSrcURL'\nimport AlertComponent from '../../components/weather/AlertComponent'\nimport {isEmpty} from 'lodash-es'\n\nconst WeatherForecastContainer = ({\n  weatherCurrent,\n  weatherForecast,\n  alerts,\n  address,\n  latlong,\n}) => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  const WET_TYPES = ['rain', 'snow', 'sleet', 'hail']\n\n  // return rain or snow svg image for the above wet types\n  const weatherSVG = () => {\n    if (weatherCurrent.icon === 'snow') {\n      return 'snow'\n    }\n    return 'rain'\n  }\n\n  const imageBorder = {\n    borderTopLeftRadius: '1rem',\n    borderTopRightRadius: '1rem',\n  }\n\n  const [showAlerts, setShowAlerts] = useState(true)\n\n  const toggleWeatherAlerts = () => {\n    setShowAlerts(!showAlerts)\n  }\n\n  return (\n    <Fragment>\n      <div\n        className={'flex flex-col justify-center items-center lg:px-5 pt-10'}>\n        <div\n          className={`sm:w-full lg:w-5/6 xl:max-w-6xl bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none rounded-t-2xl shadow-lg`}>\n          <div className='relative overflow-hidden'>\n            <img\n              src={`${AssetsSrcURL}/weather-backgrounds/${getWeatherBackground(\n                weatherCurrent\n              )}.jpg`}\n              alt='clear day'\n              className='w-full object-cover object-center weather-background'\n              style={imageBorder}\n            />\n            {/* show rain or snow svg only when weather icon exist in WET_TYPES*/}\n            <div>\n              {WET_TYPES.includes(weatherCurrent.icon) && (\n                <img\n                  src={`${AssetsSrcURL}/weather-backgrounds/${weatherSVG()}.svg`}\n                  alt='clear day'\n                  className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\n                  style={imageBorder}\n                />\n              )}\n            </div>\n\n            {/* current weather container should be on the image on mobile and small devices */}\n            <div\n              className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\n              <CurrentWeatherContainer\n                weatherCurrent={weatherCurrent}\n                address={address}\n                latlong={latlong}\n              />\n            </div>\n\n            {/* current weather and forecast container should be on the image from medium devices */}\n            <div\n              className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\n              style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\n              <CurrentWeatherContainer\n                weatherCurrent={weatherCurrent}\n                address={address}\n                latlong={latlong}\n              />\n              <ForecastContainer\n                cityName={address.cityName}\n                weatherCurrent={weatherCurrent}\n                weatherForecast={weatherForecast}\n              />\n            </div>\n          </div>\n\n          <div className='block md:hidden'>\n            <ForecastContainer\n              cityName={address.cityName}\n              weatherCurrent={weatherCurrent}\n              weatherForecast={weatherForecast}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className='relative'>\n        <p\n          className={`mx-auto text-center pt-2 pb-10 text-xs font-light text-${colorTheme} bg-${theme}`}>\n          Powered by&nbsp;\n          <a\n            href='https://darksky.net/poweredby/'\n            target='_blank'\n            rel='noreferrer noopener'\n            className={`link z-0 font-medium hover:text-${theme}`}\n            onClick={() => emitGA('powered-by', 'Dark Sky')}>\n            Dark Sky\n          </a>\n        </p>\n\n        {/* weather alerts */}\n        {!isEmpty(alerts) ? (\n          <Fragment>\n            <div className='text-center pb-5'>\n              <p>\n                <button\n                  className={`bg-${colorTheme} text-${theme} font-semibold py-3 px-6 rounded-full capitalize`}\n                  onClick={toggleWeatherAlerts}>\n                  {showAlerts ? 'Hide' : 'View'} Weather Alerts\n                </button>\n              </p>\n            </div>\n            <div className='pb-5'>\n              {showAlerts ? (\n                <Fragment>\n                  {alerts.map((alert, index) => {\n                    return (\n                      <div className='my-2' key={index}>\n                        <AlertComponent alert={alert} />\n                      </div>\n                    )\n                  })}\n                </Fragment>\n              ) : null}\n            </div>\n          </Fragment>\n        ) : null}\n      </div>\n    </Fragment>\n  )\n}\n\nexport default WeatherForecastContainer\n"],"sourceRoot":""}