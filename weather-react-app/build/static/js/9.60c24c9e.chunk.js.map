{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["WeatherContainer","addressContext","useContext","AddressContext","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","alerts","setAlerts","isLoading","setIsLoading","isError","setIsError","validCityName","isValid","address","cityName","includes","setWeatherData","current","forecast","fetchWeatherData","a","FetchWeatherData","error","isNil","Sentry","useEffect","showLoader","latlong","timer","setInterval","clearInterval","loaderText","className","errorMessage"],"mappings":"sPAuIeA,UA7HU,WACvB,IAAMC,EAAiBC,qBAAWC,KAClC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAQMC,EAAgB,WACpB,GAAIC,YAAQf,EAAegB,SAAU,CACnC,IAAMC,EAAWjB,EAAegB,QAAQC,SACxC,OACEF,YAAQE,KACPA,EAASC,SAAS,eAClBD,EAASC,SAAS,QAGvB,OAAO,GAGHC,EAAiB,SAACC,EAASC,EAAUb,GACrCO,YAAQK,IAAYL,YAAQM,KAC9Bd,EAAkBa,GAClBf,EAAmBgB,GACnBZ,EAAUD,KAIRc,EAAgB,uCAAG,oCAAAC,EAAA,sEAErBZ,GAAa,GAFQ,SAQXa,YAAiBxB,GARN,gBAInBM,EAJmB,EAInBA,eACAF,EALmB,EAKnBA,gBACAI,EANmB,EAMnBA,OACAiB,EAPmB,EAOnBA,MAIEC,YAAMD,IACRN,EAAeb,EAAgBF,EAAiBI,GAEhDK,GAAW,IAEXA,GAAW,GAhBQ,kDAmBrBA,GAAW,GACXc,IAAA,MApBqB,yBAsBrBhB,GAAa,GAtBQ,6EAAH,qDAgDtB,OArBAiB,qBAAU,WACRjB,EAAaX,EAAe6B,cAC3B,CAAC7B,EAAe6B,aAEnBD,qBAAU,WACJb,YAAQf,EAAe8B,SACzBR,IAEAT,GAAW,GAGb,IAAMkB,EAAQC,aAAY,WACxBV,MACC,MAEH,OAAO,WACLW,cAAcF,MAGf,CAAC/B,EAAe8B,UAGjB,kBAAC,WAAD,KACGpB,EACC,kBAAC,IAAD,CACEwB,WACEpB,IAAa,wCACwBd,EAAegB,QAAQC,SAD/C,iBAET,oEAIR,kBAAC,WAAD,KACGL,EACC,yBAAKuB,UAAU,uBACb,yBAAKA,UAAU,+BACb,kBAAC,IAAD,CACEC,aACEtB,IAAa,qEACqDd,EAAegB,QAAQC,SAD5E,kBAET,qHAMZ,kBAAC,WAAD,KAjGDF,YAAQT,GAmGH,kBAAC,IAAD,CACEA,eAAgBA,EAChBF,gBAAiBA,EACjBI,OAAQA,EACRQ,QAAShB,EAAegB,QACxBc,QAAS9B,EAAe8B,UAExB","file":"static/js/9.60c24c9e.chunk.js","sourcesContent":["import React, {useState, useEffect, useContext, Fragment} from 'react'\nimport {AddressContext} from '../../context/AddressContext'\nimport FetchWeatherData from '../../utils/FetchWeatherData'\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\nimport LoaderComponent from '../../components/loader/LoaderComponent'\nimport ErrorComponent from '../../components/error/ErrorComponent'\nimport * as Sentry from '@sentry/browser'\nimport isValid from '../../utils/ValidityChecker'\nimport {isNil} from 'lodash-es'\n\nconst WeatherContainer = () => {\n  const addressContext = useContext(AddressContext)\n  const [weatherForecast, setWeatherForecast] = useState({})\n  const [weatherCurrent, setWeatherCurrent] = useState({})\n  const [alerts, setAlerts] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isError, setIsError] = useState(false)\n\n  // check whether to show/hide weatherForecastContainer based on weatherCurrent\n  const showWeatherForecast = () => {\n    return isValid(weatherCurrent)\n  }\n\n  // check whether the cityName is valid\n  const validCityName = () => {\n    if (isValid(addressContext.address)) {\n      const cityName = addressContext.address.cityName\n      return (\n        isValid(cityName) &&\n        !cityName.includes('undefined') &&\n        !cityName.includes('null')\n      )\n    }\n    return false\n  }\n\n  const setWeatherData = (current, forecast, alerts) => {\n    if (isValid(current) && isValid(forecast)) {\n      setWeatherCurrent(current)\n      setWeatherForecast(forecast)\n      setAlerts(alerts)\n    }\n  }\n\n  const fetchWeatherData = async () => {\n    try {\n      setIsLoading(true)\n      const {\n        weatherCurrent,\n        weatherForecast,\n        alerts,\n        error,\n      } = await FetchWeatherData(addressContext)\n      // set the weatherCurrent and weatherForecast only when the data is non-empty\n      // this way, the old fetched data can be preserved when api call fail or limit exceed\n      if (isNil(error)) {\n        setWeatherData(weatherCurrent, weatherForecast, alerts)\n        // set the error to false state with the above successful weather data fetch\n        setIsError(false)\n      } else {\n        setIsError(true)\n      }\n    } catch (err) {\n      setIsError(true)\n      Sentry.captureException(err)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  // show the loading state when fetching address information using lat & long from addressContext\n  useEffect(() => {\n    setIsLoading(addressContext.showLoader)\n  }, [addressContext.showLoader])\n\n  useEffect(() => {\n    if (isValid(addressContext.latlong)) {\n      fetchWeatherData()\n    } else {\n      setIsError(true)\n    }\n    // fetch weather data every 60 minutes\n    const timer = setInterval(() => {\n      fetchWeatherData()\n    }, 3600000)\n\n    return () => {\n      clearInterval(timer)\n    }\n    // eslint-disable-next-line\n  }, [addressContext.latlong])\n\n  return (\n    <Fragment>\n      {isLoading ? (\n        <LoaderComponent\n          loaderText={\n            validCityName()\n              ? `Fetching weather forecast for ${addressContext.address.cityName} ðŸ˜Ž`\n              : 'Fetching address information using your geolocation coordinates'\n          }\n        />\n      ) : (\n        <Fragment>\n          {isError ? (\n            <div className='flex justify-center'>\n              <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\n                <ErrorComponent\n                  errorMessage={\n                    validCityName()\n                      ? `Something went wrong. Failed to fetch weather forecast for ${addressContext.address.cityName}! ðŸ˜¢`\n                      : 'Failed to fetch address information for your geolocation. Please search for any city to get weather forecast!!'\n                  }\n                />\n              </div>\n            </div>\n          ) : (\n            <Fragment>\n              {showWeatherForecast() ? (\n                <WeatherForecastContainer\n                  weatherCurrent={weatherCurrent}\n                  weatherForecast={weatherForecast}\n                  alerts={alerts}\n                  address={addressContext.address}\n                  latlong={addressContext.latlong}\n                />\n              ) : null}\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </Fragment>\n  )\n}\n\nexport default WeatherContainer\n"],"sourceRoot":""}